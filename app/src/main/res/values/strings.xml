<resources>

    <string name="app_name">Data Access PoC</string>

    <string name="HomeActivity_label">Data Access Demo</string>

    <string name="SecondActivity_label">Another screen..</string>

    <!-- TODO maybe add note on DataAccessControllerImpl -->
    <string name="AppDescription">The networking / data access structure used in this sample app:
        \n\nRetrofit with RxJava for the REST API calls, and EventBus to deliver the results back to the presentation layer.
        \nRx features to handle errors, multiple calls, fallback to offline store, and more.
        \nThe whole component is placed in a Android Service which starts on-demand and stops when there are no more ongoing tasks.
        \n\nMore info at each use-case.
    </string>

    <!-- Basic use case-->
    <string name="UseCaseTitle_Basic">Basic Use-Case</string>
    <string name="WeatherUseCase_GetTemp">Get the current temperature</string>
    <string name="GetTemp_Button">Get Temperature</string>
    <string name="Result_Text">[Result]</string>
    <string name="UseCase_Basic_Description">
        User initiates data access, receives the result on UI. Requires a single network call.
        \n
        \n - Displays loading indicator
        \n - Handles rotation (keeps indicator, doesn\'t restart call)
        \n - Can deliver result to different screen
    </string>
    <string name="UseCase_Basic_Implementation">
        Retrofit with RxJava for the API call, and EventBus to deliver the results back to the presentation layer.
        \nThe whole component is put in an Android Service which starts on-demand and stops when there is no more ongoing task.
    </string>

    <!-- Parallel and Chained use case -->
    <string name="UseCaseTitle_ParallelChained">Parallel&amp;Chained calls</string>
    <string name="WeatherUseCase_GetForecast">Get the 5 day forecast for the city that is warmer currently</string>
    <string name="GetForecast_Button">Get forecast</string>
    <string name="UseCase_ParallelChained_Description">
        User initiates data access, receives the result on UI.
        \nRequires multiple network calls executed both parallel and chained (after previous one completed).
        \n - Progress dialog displays steps in progress
        \n - Handles rotation (keeps dialog, doesn\'t restart call)
    </string>
    <string name="UseCase_ParallelChained_Implementation">Rx operator <i>zip</i> for parallel call, <i>flatMap</i> for chaining.
        \nProgress update events sent with EventBus at any point in Rx chain to presentation layer.
        \nRetained DialogFragment for the dialog.
    </string>
    <string name="ForecastProgress_Step1">Step 1: Getting current temperatures…</string>
    <string name="ForecastProgress_Step2">Step 2: Getting forecast…</string>

    <!-- Error messages -->
    <string name="ErrorMessage_noInternet">No internet connection</string>
    <string name="ErrorMessage_unknownError">Unknown error happened</string>
    <string name="ErrorMessage_unknownHost">Server unreachable</string>
    <string name="ErrorMessage_noOfflineData">No internet connection and no offline data</string>

    <string name="Menu_RealService">Use Real Weather Service</string>
    <string name="Menu_MockService">Use Mock Weather Service</string>
    <string name="Menu_ClearDataStore">Clear data store</string>

    <string name="City1_Default">Budapest</string>
    <string name="City2_Default">London</string>

    <string name="UseCase_Choose">[Choose use case…]</string>
    <string name="UseCase_Combined">Combined use case</string>
    <string name="UseCaseTitle_OfflineStorage">Offline Storage</string>
    <string name="RequirementTitle">Requirement / Use-case</string>
    <string name="ImplementationTitle">Implementation</string>
    <string name="UseCaseTitle_ErrorHandling">Error Handling</string>
    <string name="UseCaseTitle_OnGoingCall">Ongoing call handling</string>
    <string name="UseCase_ErrorHandling_Desc">
        User initiates data access, receives the result on UI. Requires a single network call.
        \n
        \n - Error message displayed if something went wrong
        \n - Different messages for different errors
    </string>
    <string name="HowToTest_Title">How to test</string>
    <string name="UseCase_ErrorHandling_HowToTest">
        1. Use Real Weather Service (invalid API key used here -> error dialog)
        \n2. Disconnect from internet (no internet error message)
        \n3. Use Mock Weather service (completes successfully)</string>
    <string name="OtherScreenButton">Check on another screen</string>
    <string name="UseCase_ErrorHandling_Implementation">Errors propagate through the Rx chain and interpreted at single place at the end. Event sent to presentation layer where message is decided.</string>
    <string name="dismiss">Dismiss</string>
    <string name="ErrorMessage_unauthorized">API key unauthorized. A custom message can come here..</string>

    <string name="UseCase_OngoingCall_Desc">User initiates data access, receives the result on UI. Requires a single network call.
    \n\nThere is only one call at a time, initiating again is ignored.</string>
    <string name="UseCase_OngoingCall_Implementation">Rx Subscription is kept in field and checked if subscribed.</string>
    <string name="UseCase_OngoingCall_HowToTest">Use Mock service (real one is too fast) and tap the button multiple times. Try basic use-case in comparison.</string>

    <string name="UseCase_OfflineStorage_Requirement">User initiates data access, receives the result on UI.
        \n - When online, network call is executed and result is displayed and saved
        \n - When offline, data is loaded from offline store (custom cache)
    </string>
    <string name="UseCase_OfflineStorage_Implementation">Rx operators <i>doOnSuccess</i> and <i>onErrorResumeNext</i> are used to construct the appropriate chain.</string>
    <string name="UseCase_OfflineStorage_HowToTest">Go offline and tap the button</string>

    <string name="UseCase_Combined_Requirement">User initiates data access, receives the result on UI. Requires a single network call.
        \n\n - Progress dialog
        \n - Error handling
        \n - Offline store
        \n - Ongoing call handling
    </string>

    <string name="UseCase_ParallelAndChained_Requirement">User initiates data access, receives the result on UI.
        \nRequires multiple network calls. Both parallel and sequential executions are needed.
        \n\nShows dialog about the progress steps
    </string>
    <string name="UseCase_ParallelAndChained_Implementation">Rx operator <i>zip</i> for parallel execution and <i>flatMap</i> for sequential execution.
        \nProgress update events sent to presentation layer at any point in Rx chain.
    </string>

    <!-- TODO add notes on real, mock service usage on landing page -->

    <!-- TODO use-case for http cache? -->


</resources>
